#!/usr/bin/env python3

# Copyright 2018 Hannes Riechert at Max-Planck-Institute for Astronomy.
# Licensed under GPL-3.0-or-later.  See COPYING for details.


import argparse
import matplotlib.pyplot as plt

import mascado.utility.zemax as zemax
import mascado.utility.plotting as plotting


def main():
    parser = argparse.ArgumentParser(
        description="Analyze properties of distorted pattern compared"
                    " to on-sky grid.")
    parser.add_argument(
        "zemaxfile1", metavar="GRIDDATA1",
        help="Path to Grid Distortion Data exported from Zemax as TXT file.")
    parser.add_argument(
        "zemaxfile2", metavar="GRIDDATA2",
        help="Path to Grid Distortion Data exported from Zemax as TXT file.")
    parser.add_argument(
        "--format", type=str, default='A', metavar='LETTER',
        help="Key for input format of file.  Defaults to 'A' for Zemax"
             " exports of Grid Data.")
    parser.add_argument(
        "--scale", type=float, default=1, metavar="SCALE",
        help="Plate scale for undistorted grid.")
    parser.add_argument(
        "--maxorder", type=int, default=5, metavar="MAXORDER")
    parser.add_argument(
        "--maxcondition", type=float, default=1e2, metavar="FLOAT",
        help="Maximum value of condition number for SVD.")
    parser.add_argument(
        "--psd", action='store_true',
        help="Show second plot window with fourier transforms and"
             " PSD of distortion pattern.")
    parser.add_argument(
        "--saveplot", metavar="PLOTFILE",
        help="Path to image file where plot will be saved instead of"
             " being displayed.")
    parser.add_argument(
        "--savepsdplot", metavar="IMGFILE",
        help="Path to image file where plot of fourier transforms and PSD will"
             " be saved.")
    parser.add_argument(
        "--encoding", default='latin1', metavar="ENCODING",
        help="Encoding of both Zemax files, e.g. latin1 or utf8."
             " Defaults to latin1.")
    args = parser.parse_args()

    df1 = zemax.load_grid_data_variant(
        args.format, args.zemaxfile1, encoding=args.encoding)
    df2 = zemax.load_grid_data_variant(
        args.format, args.zemaxfile2, encoding=args.encoding)
    atrafo, posnormscale, positions, (dis1, dis2) = \
        zemax.distortions_on_sky([df1, df2], scale=args.scale)
    print("Affine transform: focal plane (mm) -> reference grid (arcseconds):")
    print(atrafo)
    print("Is applied to both catalogs GD1 and GD2.")
    print("Drift = GD2 - GD1")
    print()

    drift = dis2 - dis1

    plotting.set_fontsize(medium=9)
    fig = plt.figure(figsize=(8*1.3, 6*1.3))
    vf = plotting.make_grid_analysis(
        fig, positions, drift, posnormscale, args.maxorder,
        maxcondition=args.maxcondition, name="drift")
    if args.saveplot:
        print()
        print("Writing plot to", args.saveplot)
        plt.savefig(args.saveplot, dpi=250)
    else:
        plt.show()
    plt.close()

    if args.psd or args.savepsdplot:
        fig = plt.figure(figsize=(8*1.3, 6*1.3))
        plotting.make_psd_analysis(fig, vf, posnormscale, name="drift")
    if args.psd and not args.savepsdplot:
        plt.show()
    if args.savepsdplot:
        print()
        print("Writing PSD plot to", args.savepsdplot)
        plt.savefig(args.savepsdplot, dpi=150)


if __name__ == '__main__':
    main()
